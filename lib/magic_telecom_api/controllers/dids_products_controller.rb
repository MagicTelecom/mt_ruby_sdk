# This file was automatically generated by APIMATIC v2.0 on 06/23/2016

module MagicTelecomApi
  class DidsProductsController
    @@instance = DidsProductsController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Allow clients to get the list of available phone_numbers
    # @param [Numeric] page Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
    # @param [Numeric] limit Optional parameter: Maximum number of results to return in the response
    # @param [String] filter Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, phone_number, phone_number_type, zip_code
    # @return mixed response from the API call
    def get_dids(page = 1, limit = 10, filter = nil)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/dids'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_query_parameters query_builder, {
        'page' => if page.nil? then 1 else page end,
        'limit' => if limit.nil? then 10 else limit end,
        'filter' => filter
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end

    # Allow clients to get a specific phone_number
    # @param [String] phone_number Required parameter: Phone Number
    # @return mixed response from the API call
    def get_dids_by_phone_number(phone_number)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/dids/{phone_number}'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        'phone_number' => phone_number
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end

    # Allow clients to get the list of available locations.
    # @param [Numeric] page Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
    # @param [Numeric] limit Optional parameter: Maximum number of results to return in the response
    # @param [String] filter Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, prefix, phone_number_type, zip_code, npa, nxx, fax
    # @return mixed response from the API call
    def get_locations(page = 1, limit = 10, filter = nil)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/locations'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_query_parameters query_builder, {
        'page' => if page.nil? then 1 else page end,
        'limit' => if limit.nil? then 10 else limit end,
        'filter' => filter
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end

    # Allow clients to get a specific location.
    # @param [String] location_handle Required parameter: Location Handle
    # @return mixed response from the API call
    def get_location_by_handle(location_handle)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/locations/{location_handle}'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        'location_handle' => location_handle
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end

    # Allow clients to get the list of available trunks
    # @param [Numeric] page Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
    # @param [Numeric] limit Optional parameter: Maximum number of results to return in the response
    # @return mixed response from the API call
    def get_trunks(page = 1, limit = 10)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/trunks'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_query_parameters query_builder, {
        'page' => if page.nil? then 1 else page end,
        'limit' => if limit.nil? then 10 else limit end
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end

    # Allow clients to get a specific trunk
    # @param [String] trunk_handle Required parameter: Trunk Handle
    # @return mixed response from the API call
    def get_trunk_by_handle(trunk_handle)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/trunks/{trunk_handle}'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        'trunk_handle' => trunk_handle
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end

    # Allow clients to get trunk zones.
    # @param [Numeric] page Required parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
    # @param [Numeric] limit Required parameter: Maximum number of results to return in the response.
    # @return mixed response from the API call
    def get_countries_by_trunk(page, limit)
      # the base uri for api requests
      query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      query_builder << '/dids/products/trunks/countries'

      # process optional query parameters
      query_builder = APIHelper.append_url_with_query_parameters query_builder, {
        'page' => page,
        'limit' => limit
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'X-Auth-Token' => Configuration.x_auth_token
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers: headers

      # Error handling using HTTP status codes
      if response.code == 401
        raise APIException.new 'You are not authenticated', 401, response.raw_body
      elsif response.code == 403
        raise APIException.new 'This action needs a valid WSSE header', 403, response.raw_body
      elsif response.code == 404
        raise APIException.new 'Resource not found', 404, response.raw_body
      elsif response.code == 400
        raise APIException.new 'Http bad request', 400, response.raw_body
      elsif !response.code.between?(200, 206) # [200,206] = HTTP OK
        raise APIException.new 'HTTP Response Not OK', response.code, response.raw_body
      end

      response.body
    end
  end
end
